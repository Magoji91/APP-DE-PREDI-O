
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Libraries and options ####
library(shiny)
library(shinythemes)
library(wordcloud)

library(data.table)
library(stringr)
library(tidytext)
library(dplyr)
library(tm)
library(ggplot2)


setwd("C:/Users/User/Documents/PREDIWO")

# read in the unigram, bigram, trigram, quadragram and pentagram files
unigram<-fread("unigrams.csv")
bigram<-fread("bigrams.csv")
trigram<-fread("trigrams.csv")
quadragram<-fread("quadragrams.csv")
pentagram<-fread("pentagrams.csv")

##Define the function for calculating a score and a back-off score
stupid_backoff <- function (sentence) {
  token <- strsplit(sentence, split=" ")[[1]]##split the sentence into  a vector of words
  token<-tail(token, n=5)##choose the last 5 words in the sentence
  ##the if else function defines a value for variable k depending on the length of the partial sentence
  ifelse(length(token)>=5, k<-4,
         ifelse(length(token)==4, k<-3,
                ifelse(length(token)==3, k<-2,
                       ifelse(length(token)==2, k<-1,k<-0))))
  
  ifelse(k>0,val <- paste(token[(length(token) - k + 1): (length(token))], collapse= " "),val<-token)# if more than one word
  ##in a sentence then val is a subset of token based on the k value, if not val is equal to token
  
  numerator <- pentagram$n[pentagram$start==val]## select the frequencies from pentagram (pentagram$n) where the 4-word sentence matches the start
  
  if (length(numerator)>0) { #if matching pentagram found
    denominator <- quadragram$n[quadragram$quadragram==val]
    res <- numerator / denominator
    names<-pentagram$end[pentagram$start==val]
  }
  else {#back-off one step and search for a quadragram 
    
    token <- tail(token, n=4)# get last 4 elements of the token vector
    ifelse(length(token)>=5, k<-4,
           ifelse(length(token)==4, k<-3,
                  ifelse(length(token)==3, k<-2,
                         ifelse(length(token)==2, k<-1,k<-0))))
    ifelse(k>0,val <- paste(token[(length(token) - k + 1): (length(token))], collapse= " "),val<-token)# take the last 4 words in the sentence
    numerator <- quadragram$n[quadragram$start==val]
    if (length(numerator)>0) { #if matching quadragram found
      denominator <- trigram$n[trigram$trigram==val]
      if (length(token)>=5){
        res <- numerator*0.4 / denominator}#(this applies if 5 or more words were entered and not found in pentagram)
      if (length(token)==4){
        res <- numerator/ denominator}#(this applies if 4 words were entered and found in the quadragram)
      names<-quadragram$end[quadragram$start==val]}
    
    else {#back-off one step and search for a trigram
      token <- tail(token, n=3)# get last 3 elements of the token vector
      ifelse(length(token)>=5, k<-4,
             ifelse(length(token)==4, k<-3,
                    ifelse(length(token)==3, k<-2,
                           ifelse(length(token)==2, k<-1,k<-0))))
      
      ifelse(k>0,val <- paste(token[(length(token) - k + 1): (length(token))], collapse= " "),val<-token)# take the last 4 words in the sentence
      numerator <- trigram$n[trigram$start==val]
      if (length(numerator)>0) { #if matching trigram found
        denominator <- bigram$n[bigram$bigram==val]
        if (length(token)>=5){
          res <- numerator*0.4**2 / denominator}#(this applies if 5 or more words were entered and not found in pentagram and quadragram
        if (length(token)==4){
          res <- numerator*0.4/ denominator}#(this applies if 4 words were entered and not found in the quadragram)
        if (length(token)==3){
          res <- numerator/ denominator}##(this applies if 3 words were entered and found in the trigram)
        names<-trigram$end[trigram$start==val]
      }
      else{#back-off one step and search for a bigram
        token <- tail(token, n=2)# get last 2 elements of the token vector
        ifelse(length(token)>=5, k<-4,
               ifelse(length(token)==4, k<-3,
                      ifelse(length(token)==3, k<-2,
                             ifelse(length(token)==2, k<-1,k<-0))))
        ifelse(k>0,val <- paste(token[(length(token) - k + 1): (length(token))], collapse= " "),val<-token)# take the last 4 words in the sentence
        numerator <- bigram$n[bigram$start==val]
        if (length(numerator)>0) { #if matching bigram found
          denominator <- unigram$n[unigram$words==val]
          if (length(token)>=5){
            res <- numerator*0.4**3 / denominator}#(this applies if 5 or more words were entered and not found in pentagram,quadragram, trigram
          if (length(token)==4){
            res <- numerator*0.4**2/ denominator}#(this applies if 4 words were entered and not found in the quadragram and trigram)
          if (length(token)==3){
            res <- numerator*0.4/ denominator}
          if (length(token)<=2){
            res <- numerator/ denominator}
          names<-bigram$end[bigram$start==val]}
        
        else{# this is if the entry is blank i.e no word entry for the sentence
          res<-0
          names<-"no words found"}
      }}}###closes all elses
  
  return(list(name=names, count = res))##the output is a list of 2 vectors with names and counts
}

predict_word<-function(partial_sentence){
  ##clean the input sentence
  trim <- function (x) gsub("^\\s+|\\s+$", "", x)# remove leading and trailing white spaces
  partial_sentence <- trim(partial_sentence)# apply the trim function to the partial sentence
  partial_sentence<-tolower(partial_sentence)# convert the sentence to lower case
  partial_sentence<-gsub('[0-9]+', '', partial_sentence)# removes numbers from a string
  partial_sentence<-gsub("[^[:alnum:][:blank:]+?&/\\-]", "", partial_sentence)# remove all non alphanumeric characters
  out1<-stupid_backoff(sentence=partial_sentence)#apply the stupid back off function to partial_sentence. The results are stored in out1
  out1<-as.data.frame(cbind(as.character(out1[[1]]),signif(as.numeric(as.character(out1[[2]])),digits=3)))# convert the output to a dataframe
  names(out1)<-c("PredictedWord", "Score")## rename the columns of the dataframe
  return(out1)
}


# Define the app ####

ui <- shinyUI(fluidPage(
  
  # Theme
  theme = shinytheme("spacelab"),
  
  # Application title
  titlePanel("Next Word Predictor"),
  
  
  
  
  sidebarPanel(
    
    # Text input
    textInput("text", label = ('Please enter a partial sentence ideally two words or more separated by a space'), value = 'the default value'),
    
    # Submit button for making the prediction
    submitButton("Submit"),
    
    hr(),
    # Table output
    dataTableOutput('table')),
  
  # Mainpanel ####
  
  mainPanel(
    tabsetPanel(type = "tabs", 
                tabPanel("Predictions",
                         
                         wellPanel(
                           
                           # Link to report
                           helpText(a('More information on the project',
                                      href='http://rpubs.com/MAGOJI/274489', 
                                      target = '_blank')
                           ),
                           
                           # Link to repo
                           helpText(a('Link to the GitHub Repository',
                                      href='https://github.com/arttuK/word-prediction/tree/master/shiny',
                                      target = '_blank')
                           ),
                           
                           
                           # Barchart output
                           h2("Top 5 Predicted Words"),
                           plotOutput("barchart"),
                           
                           
                           h2("Wordcloud for the Predicted Words"),
                           plotOutput('wordcloud')
                           
                         )),
                tabPanel("Instructions",
                         h1("Using the App"),
                         HTML("(1.) The application uses an algorithm based on the stupid backoff in order to predict the sequential word in a given sentence or sentence <br>
                              (2.) To predict use of the application simply write a partial sentence of 2 or more words separated by a space and click on the option send <br> 
                              (3.) A table with the possible predicted words and the punctuation of the backoff algorithm will appear in the sidebar <br>
                              (4.)  The main panel will show a bar chart of the 5 words with the highest possible incidence, as well as the 100 main words predicted in a wordcloud <br>
                              (5.) For details of the App project please click on the hyperlinks in the word prediction tab <br>
                              "))
                
                
                
                         ) )
    ))
  

# Define application ####
    
server <- shinyServer(function(input, output) {
  
  output$table<-renderDataTable({
    par_sen<-input$text
    out<-predict_word(partial_sentence=par_sen)
    out})
  
  output$barchart <- renderPlot({
    par_sen<-input$text
    out<-predict_word(partial_sentence=par_sen)
    ifelse(nrow(out>=5), out2<-out[1:5,], out2<-out)
    levels<-as.character(out2$PredictedWord)
    out2$PredictedWord<-factor(out2$PredictedWord, levels=c(rev(levels)), labels=c(rev(levels)))# making a factor with character levels displayed
    p<-ggplot(data=out2, aes(x=PredictedWord, y=Score))
    p+ geom_bar(stat="identity", fill="blue")+coord_flip()+labs(x = "Predicted Words", y = "Backoff Score")+
      theme_bw()+
      theme(plot.background = element_blank()
            ,panel.grid.major = element_blank()
            ,panel.grid.minor = element_blank()
            ,panel.border = element_blank()
      )+
      theme(axis.line.x = element_line(color="black", size = 1),
            axis.line.y = element_line(color="black", size = 1),
            axis.title.x= element_text(face="bold",size=16),
            axis.title.y= element_text(face="bold",size=16),
            axis.text.x =element_text(face="bold",size=16),
            axis.text.y =element_text(face="bold",size=16),
            legend.position = "none") 
    
  })
  
  wordcloud_rep <- repeatable(wordcloud)
  
  output$wordcloud <- renderPlot({
    par_sen<-input$text
    out<-predict_word(partial_sentence=par_sen)
    out$Score<-as.numeric(as.character(out$Score))
    out$PredictedWord<-as.character(out$PredictedWord)
    wordcloud_rep(words=out$PredictedWord, freq=out$Score,scale=c(8,2),
                  colors=brewer.pal(8, "Dark2"), max.words=100)
  })
  
})


# Run the application 
shinyApp(ui = ui, server = server)

